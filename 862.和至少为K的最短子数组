返回 A 的最短的非空连续子数组的长度，该子数组的和至少为 K 
如果没有和至少为 K 的非空子数组，返回 -1 。
示例 1：
输入：A = [1], K = 1
输出：1
示例 2：
输入：A = [1,2], K = 4
输出：-1
示例 3：
输入：A = [2,-1,2], K = 3
输出：3
提示：
1 <= A.length <= 50000
-10 ^ 5 <= A[i] <= 10 ^ 5
1 <= K <= 10 ^ 9

方法一、
暴力解法：
从数组头以步长x数相加之和sum，步长优先求和，开始找是sum和K否相等；相等则找到，步长为x;
若不相等，步长加1，再次从数组头开始；
步长不大于数组长度
class Solution(object):
    def shortestSubarray(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        max = len(A)
        if max == 0:
            return -1
        x = 1
        while x<=max :
            for i in range(max-x+1):
                sum = 0;
                for j in range(x):
                    sum += A[i+j]
                if sum == K:
                    return x
            x += 1
        return -1
方法二、

测试用例
1，A=[1],K=1,预期：1
2,A=[1],K = 0;预期：-1
3,A=[1], K=-1;预期：-1
4,A=[],K=1;预期：-1
5,A = [2,-1,2],3;预期：3
6，A = [1,2], K = 4;预期：-1
7,A=[48,99,37,4,-31], K=140;预期：2
